[
  {
    "categoryName": "Versionshantering & Samarbete",
    "terms": [
      {
        "term": "Version Control",
        "en": "A system that records changes to files over time so that you can recall specific versions later. It allows multiple developers to collaborate on a project by tracking and managing changes to the codebase. *Version control systems (VCS)* enable developers to work simultaneously on different parts of a project, keep track of every modification, and revert back to previous versions if necessary.",
        "se": "**Ett system som registrerar ändringar i filer över tid så att du kan återkalla specifika versioner senare**. \n \n Det gör det möjligt för flera utvecklare att samarbeta i ett projekt genom att spåra och hantera ändringar i kodbasen. *Versionshanteringssystem (VCS)* gör det möjligt att arbeta samtidigt på olika delar av ett projekt, hålla reda på varje ändring och återställa tidigare versioner vid behov.",
        "seSimple": "Ett sätt att spara och hålla koll på olika versioner av filer eller kod så att man kan samarbeta och backa om något blir fel."
      },
      {
        "term": "Repository",
        "en": "A central location where code and its history are stored and managed, typically using a version control system like Git. It acts as a storage space for all the files, directories, and related resources of a project, along with their version history, enabling collaboration, version tracking, and management of code changes over time. Repositories can be hosted locally on a developer's machine or remotely on platforms like GitHub, GitLab or Bitbucket.",
        "se": "**En central plats där kod och dess historik lagras och hanteras**, vanligtvis med ett *versionshanteringssystem* som Git. Det fungerar som **lagringsutrymme för alla filer, kataloger och relaterade resurser i ett projekt, tillsammans med deras versionshistorik**, vilket möjliggör samarbete, spårning av versioner och hantering av kodändringar över tid. Repositories kan hostas lokalt på en utvecklares dator eller externt på plattformar som GitHub, GitLab eller Bitbucket.",
        "seSimple": "En plats där projektets filer och alla versioner sparas, antingen på datorn eller på nätet."
      },
      {
        "term": "Git Flow",
        "en": "The stages through which code changes move as they are developed, committed, and integrated into a Git repository. Understanding the Git life cycle is essential for effectively managing changes, collaborating with others, and maintaining a clean project history.",
        "se": "Git-flödet beskriver de olika stegen när man arbetar med Git, till exempel att skapa en branch, göra commits och sedan slå ihop ändringarna till huvudprojektet.",
        "seSimple": "Stegen man går igenom när man jobbar med Git, från att skriva kod till att spara och slå ihop den med resten av projektet."
      },
      {
        "term": "Merge Conflict",
        "en": "A Merge Conflict occurs when Git is unable to automatically resolve differences between two branches during a merge. This typically happens when changes are made to the same part of a file in different branches, and Git cannot determine which change should take precedence. Merge conflicts must be resolved manually by the developer before the merge can be completed.",
        "se": "En merge conflict uppstår när två olika ändringar krockar i samma fil och Git inte kan avgöra vilken version som ska gälla. Då måste utvecklaren själv lösa konflikten manuellt innan mergningen kan slutföras.",
        "seSimple": "När Git inte vet vilka ändringar som ska gälla och man själv måste välja vilken kod som ska sparas."
      },
      {
        "term": "README.md",
        "en": "A markdown file typically found in the root directory of a software project. It serves as the main documentation for the project, providing essential information about the project, how to install and use it, and any other details that developers or users might need to understand and contribute to the project. The '.md' extension stands for markdown, a lightweight markup language that allows for easy formatting or text using plain text syntax.",
        "se": "En Markdown-fil som vanligtvis finns i rotkatalogen av ett programvaruprojekt. Den fungerar som projektets huvuddokumentation och ger nödvändig information om projektet, hur man installerar och använder det samt andra detaljer som utvecklare eller användare kan behöva för att förstå och bidra. Tillägget ”.md” står för Markdown, ett lättviktigt märkspråk som möjliggör enkel formatering av text med klartext-syntax.",
        "seSimple": "En fil med information om projektet och hur man använder det."
      },
      {
        "term": "Backlog",
        "en": "A prioritized list of tasks, features and requirements that a development team needs to work on. It serves as the team's to-do list, where items are added, refined and re-prioritized throughout the project lifecycle. The backlog is central to Agile methodologies, helping teams manage their work and stay focused on delivering the most valuable features first.",
        "se": "En prioriterad lista över uppgifter, funktioner och krav som ett utvecklingsteam behöver arbeta med. Den fungerar som teamets att-göra-lista, där objekt läggs till, förfinas och omprioriteras under projektets livscykel. Backloggen är central i agila metoder och hjälper team att fokusera på att leverera de mest värdefulla funktionerna först.",
        "seSimple": "En lista på saker teamet ska göra, ordnad efter viktighet."
      },
      {
        "term": "Self-organizing Team",
        "en": "A group of individuals who manage their work and responsibilities autonomously without the need for centralized control or micromanagement. In a self-organizing team, members collectively decide how tasks are distributed, how goals are met, and how problems are solved, leveraging their skills and expertise to achieve the best outcomes. This concept is central to agile methodologies like Scrum and is designed to foster collaboration, accountability, and adaptability.",
        "se": "En grupp individer som självständigt organiserar sitt arbete och sina ansvar utan behov av centraliserad styrning eller mikromanagement. I ett självorganiserande team beslutar medlemmarna gemensamt hur uppgifter fördelas, hur mål uppnås och hur problem löses, genom att utnyttja sina färdigheter och sin expertis. Konceptet är centralt i agila metoder som Scrum och främjar samarbete, ansvarstagande och anpassningsförmåga.",
        "seSimple": "Teamet planerar och organiserar sitt arbete själva utan chef som styr allt."
      },
      {
        "term": "Separation of Concerns (SoC)",
        "en": "A design principle in software engineering that advocates dividing a program into distinct sections, each responsible for a specific aspect of the software's functionality. By separating concerns, developers can manage complexity more effectively, improve modularity, and enhance maintainability. Each section, or 'concern', should encapsulate a specific functionality, such as the user interface, business logic, or data access, and interact with other sections through well-defined interfaces.",
        "se": "Separation of concerns innebär att programmet delas upp i olika delar där varje del ansvarar för en specifik funktion, t.ex. gränssnitt, affärslogik eller datalagring. Genom att separera ansvar kan utvecklare hantera komplexitet mer effektivt, förbättra modularitet och öka underhållbarheten.",
        "seSimple": "Man delar upp programmet i olika delar så att varje del har ett tydligt ansvar."
      }
    ]
  },
  {
    "categoryName": "Pakethantering & Byggsystem",
    "terms": [
      {
        "term": "Dependency Management",
        "en": "Dependency Management in a React application refers to the process of handling the libraries and packages that your project relies on, ensuring they are correctly installed, updated and configured. This is typically managed through the 'package.json' file, which lists all the dependencies required for the project. Tools like npm (Node Package Manager) or Yarn are used to automate the installation, updating and removal of these dependencies, making it easier to maintain a consistent development environment across different machines.",
        "se": "Hantering av bibliotek och paket som ett projekt är beroende av, för att se till att de är korrekt installerade, uppdaterade och konfigurerade. Detta hanteras ofta via 'package.json'. Verktyg som npm eller Yarn automatiserar installation, uppdatering och borttagning av dessa beroenden, vilket gör det enklare att upprätthålla en konsekvent utvecklingsmiljö över olika datorer.",
        "seSimple": "Håller reda på vilka paket och bibliotek projektet behöver och ser till att de fungerar."
      },
      {
        "term": "Package Manager",
        "en": "A tool that automates the process of installing, updating, configuring, and managing software packages or libraries. These packages are collections of code, often shared by other developers, that provide specific functionality or tools to aid in development. Package managers handle the complexities of dependency management, ensuring that the correct versions of packages and their dependencies are installed and compatible with each other.",
        "se": "Verktyg som automatiserar installation, uppdatering och hantering av paket eller bibliotek. Dessa paket är samlingar av kod, ofta delade av andra utvecklare, som tillhandahåller specifik funktionalitet eller verktyg för att underlätta utveckling. Paket-hanterare tar hand om komplexiteten i beroendehantering och säkerställer att rätt versioner av paket och deras beroenden installeras och är kompatibla med varandra. De är avgörande i modern mjukvaruutveckling, särskilt i miljöer som är starkt beroende av externa bibliotek eller moduler.",
        "seSimple": "Hjälper till att installera och uppdatera paket och bibliotek i projektet."
      },
      {
        "term": "Bundling",
        "en": "The process of combining multiple files, such as JavaScript, CSS and other assets, into a single or a few output files. This is done to reduce the number of HTTP requests needed to load a webpage, which can improve the loading speed and overall performance of web applications.",
        "se": "Processen att kombinera flera filer, som JavaScript, CSS och andra resurser, till en eller några få filer för att minska antalet HTTP-förfrågningar och förbättra laddningstiden. \n \n --- \n \n Boundler vs. Minification \n * Bundling = färre filer. \n * Minification = mindre filer. \n \n Ofta används båda tillsammans: bundlern skapar en enda fil och sen minifieras den för att bli så liten och snabb som möjligt.",
        "seSimple": "Slår ihop flera filer (så som JS och CSS) till färre filer för snabbare laddning"
      },
      {
        "term": "Webpack",
        "en": "A popular module bundler for JavaScript applications. It takes modules with dependencies and generates static assets representing those modules. Webpack allows developers to bundle and manage assets such as JavaScript, CSS, images, and fonts into a single file or smaller files, optimizing them for the web.",
        "se": "Ett populärt verktyg för att slå ihop moduler i JavaScript-applikationer. Webpack hanterar JavaScript, CSS, bilder och typsnitt, och optimerar dem för webben. Den är mycket konfigurerbar och stöder avancerade funktioner som code splitting, tree shaking och hot module replacement (HMR).",
        "seSimple": "Verktyg som kombinerar och optimerar filer för webben."
      },
      {
        "term": "Rollup",
        "en": "A module bundler for JavaScript applications, primarily used to bundle small pieces of code into larger, more complex applications. Rollup is designed to work with ES6 modules (ECMAScript 2015) and focuses on producing minimal, efficient bundles by eliminating dead code (tree-shaking) and leveraging the latest JavaScript standards.",
        "se": "Ett verktyg som slår ihop små kodbitar till större applikationer. Rollup arbetar med ES6-moduler och tar bort oanvänd kod för att skapa effektiva paket.",
        "seSimple": "Slår ihop kod och tar bort onödig kod."
      },
      {
        "term": "Vite",
        "en": "A modern front-end build tool that focuses on speed and performance. Vite is designed to improve the development experience by offering instant server startup, lightning-fast Hot Module Replacement (HMR), and optimized build processes.",
        "se": "Ett modernt byggverktyg för front-end som fokuserar på snabbhet och prestanda, med snabb serverstart och HMR.",
        "seSimple": "Snabbt byggverktyg för frontend-utveckling."
      },
      {
        "term": "Task Runner",
        "en": "A tool that automates repetitive development tasks such as minification, compilation, unit testing, linting, and file watching.",
        "se": "Verktyg som automatiserar repetitiva utvecklingsuppgifter som minifiering, kompilering och tester.",
        "seSimple": "Automatiserar vanliga utvecklingsuppgifter."
      },
      {
        "term": "Build System",
        "en": "A set of tools and processes that automate the compilation, packaging, and deployment of software applications.",
        "se": "En uppsättning verktyg och processer som automatiserar kompilering, paketering och distribution av applikationer.",
        "seSimple": "System som bygger och paketerar program automatiskt."
      },
      {
        "term": "Packaging",
        "en": "In software development, packaging refers to the process of bundling or assembling code, resources, and dependencies into a distributable format.",
        "se": "Paketering innebär att slå ihop kod, resurser och beroenden till ett format som kan distribueras.",
        "seSimple": "Slår ihop kod och resurser så att det kan användas eller distribueras."
      },
      {
        "term": "Babel",
        "en": "A JavaScript transpiler that enables developers to write modern JavaScript (including ES6 and beyond) and convert it into a backwards-compatible version for older environments.",
        "se": "Ett verktyg som omvandlar modern JavaScript till en version som fungerar i äldre miljöer.",
        "seSimple": "Gör modern JavaScript kompatibel med äldre webbläsare."
      },
      {
        "term": "Linter",
        "en": "The process of analyzing source code to detect and fix potential errors, bugs, stylistic issues, and violations of coding standards.",
        "se": "Analys av källkod för att hitta och åtgärda fel, buggar eller stilproblem.",
        "seSimple": "Hittar fel och stilproblem i koden."
      },
      {
        "term": "Tree Shaking",
        "en": "An optimization technique used in modern JavaScript bundlers to remove dead or unused code from the final output bundle.",
        "se": "Teknik för att ta bort oanvänd kod från den slutliga paketfilen.",
        "seSimple": "Tar bort kod som inte används."
      },
      {
        "term": "Obfuscation",
        "en": "The process of deliberately making source code difficult to understand by transforming it into a version that is functionally equivalent but harder for humans to read.",
        "se": "Att medvetet göra koden svår att förstå utan att ändra funktionaliteten.",
        "seSimple": "Gör koden svår att läsa."
      },
      {
        "term": "Minification",
        "en": "The process of removing all unnecessary characters from source code, such as whitespace, comments, and newlines, without changing its functionality.",
        "se": "Vad det är: Tar bort onödiga tecken i koden utan att ändra funktionalitet. \n * Byter långa variabelnamn till korta (functionName → a). \n * Syfte: Minska filstorlek → snabbare nedladdning. \n \n --- \n \n Boundler vs. Minification \n * Bundling = färre filer. \n * Minification = mindre filer. \n \n Ofta används båda tillsammans: bundlern skapar en enda fil och sen minifieras den för att bli så liten och snabb som möjligt.",
        "seSimple": "Gör koden mindre utan att ändra funktion = minskar filstorleken"
      }
    ]
  },
  {
    "categoryName": "Miljöer & Infrastruktur",
    "terms": [
      {
        "term": "Development Environment",
        "en": "A workspace or setup where developers write, test, and debug their code before it is released to other environments. It usually includes all necessary tools, libraries, and configurations needed for coding and testing features without affecting production systems.",
        "se": "En arbetsmiljö där utvecklare skriver, testar och felsöker sin kod innan den släpps till andra miljöer. Innehåller verktyg och bibliotek för att utveckla utan att påverka produktionen.",
        "seSimple": "En plats där utvecklare skriver och testar kod utan att störa det riktiga systemet."
      },
      {
        "term": "Staging Environment",
        "en": "A pre-production environment that replicates the production environment as closely as possible. It is used to test new features and changes in a realistic setting before they are deployed to production.",
        "se": "En testmiljö som liknar produktionen så mycket som möjligt. Används för att testa nya funktioner innan de går live.",
        "seSimple": "En nästan riktig miljö där man testar innan det släpps på riktigt."
      },
      {
        "term": "Production Environment (prod env)",
        "en": "The live environment where the application is available to end users. Stability, performance, and security are the main priorities in this environment.",
        "se": "Den skarpa miljön där applikationen används av riktiga användare. Fokus är på stabilitet, prestanda och säkerhet.",
        "seSimple": "Den riktiga miljön där användarna kör programmet."
      },
      {
        "term": "Release Management",
        "en": "The process of planning, scheduling, and controlling the movement of software releases into different environments, including testing and production.",
        "se": "Planering och styrning av hur mjukvara flyttas mellan testmiljöer och produktion.",
        "seSimple": "Planen för hur och när ny kod ska släppas."
      },
      {
        "term": "Environment",
        "en": "In software development, an Environment refers to a distinct setup of hardware, software, and configuration settings where specific stages of the software lifecycle, such as development, testing, or production, are carried out. Different environments are used to isolate and manage changes in the application at various stages, ensuring that the software behaves correctly before it is released to end users.",
        "se": "Inom mjukvaruutveckling syftar Environment på en särskild uppsättning av hårdvara, mjukvara och konfiguration där olika stadier av mjukvarans livscykel, som utveckling, test eller produktion, genomförs. Olika miljöer används för att isolera och hantera ändringar i applikationen så att den fungerar korrekt innan den släpps till användare.",
        "seSimple": "En plats där program utvecklas, testas eller körs på riktigt."
      },
      {
        "term": "Deployment Pipeline",
        "en": "A series of automated steps that software goes through as it progresses from development to production. The pipeline typically includes stages such as building the application, running unit and integration tests, deploying to a staging environment for further testing, and finally, deploying to the production environment. Each stage in the pipeline ensures that the code is thoroughly tested and verified, reducing the risk of errors or bugs reaching the production environment. The pipeline is a critical component of Continuous Integration (CI) and Continuous Delivery (CD) practices, enabling faster and more reliable software releases.",
        "se": "En uppsättning automatiserade steg som mjukvara går igenom från utveckling till produktion. Pipen inkluderar vanligtvis byggsteg, tester, distribution till staging för vidare testning och slutligen distribution till produktion. Varje steg säkerställer att koden testas och verifieras för att minska risken för fel i produktionen. Deployment pipeline är en central del av CI/CD och möjliggör snabbare och mer tillförlitliga releaser.",
        "seSimple": "En automatiserad process som bygger, testar och släpper ny kod steg för steg."
      },
      {
        "term": "Deploy",
        "en": "Deployment is the process of moving an application or its components from one environment to another, typically from development (dev) to testing (test), staging (stage), and finally to production (prod). Each environment serves a specific purpose: dev for development, where code is actively written and modified; test for quality assurance and automated testing; stage for final verification in an environment that closely mirrors production; and prod where the application is made available to end users. Deployment can involve several steps, including building the application, running tests, and transferring the application to the target servers.",
        "se": "Deployment är processen att flytta en applikation eller dess delar från en miljö till en annan, ofta från utveckling till test, staging och slutligen produktion. Varje miljö fyller en särskild funktion: dev för utveckling, test för kvalitetssäkring, stage för slutlig verifiering och prod för riktiga användare. Deployment kan inkludera byggning, tester och överföring av applikationen till servrar.",
        "seSimple": "Att flytta ett program från utveckling till test och till slut till riktiga användare."
      },
      {
        "term": "Docker",
        "en": "A platform for developing, shipping, and running applications inside lightweight, portable containers. These containers bundle the application code along with its dependencies, libraries, and configuration files, ensuring that the application runs consistently across different environments, whether on a developer's laptop, on-premise servers, or in the cloud. Docker simplifies the deployment process by allowing developers to package everything the application needs to run into a single container, avoiding the 'it works on my machine' problem.",
        "se": "En plattform för att utveckla, köra och distribuera applikationer i lätta, portabla containrar. Containrarna innehåller kod, beroenden, bibliotek och konfigurationer så att applikationen körs likadant överallt. Docker gör deployment enklare och eliminerar problemet med att något fungerar på en dator men inte på en annan.",
        "seSimple": "Ett verktyg som paketerar program så att de fungerar likadant överallt."
      },
      {
        "term": "Containerization",
        "en": "A lightweight form of virtualization that involves packaging an application along with its dependencies, libraries, and configuration files into a single, portable container. This container can run consistently across different environments, from development to production, regardless of underlying system differences. Containers are isolated from each other and the host system, but they share the host's operating system kernel, making them more efficient than traditional virtual machines.",
        "se": "En lättviktig form av virtualisering där en applikation och dess beroenden paketeras i en portabel container. Den körs konsekvent i olika miljöer, från utveckling till produktion. Containrar är isolerade från varandra men delar operativsystemets kärna, vilket gör dem mer effektiva än virtuella maskiner.",
        "seSimple": "Att köra program i containrar som fungerar likadant i olika miljöer."
      },
      {
        "term": "Serverless Computing",
        "en": "A cloud computing model where the cloud provider automatically manages the infrastructure, allowing developers to focus solely on writing and deploying code. In a serverless architecture, the server management and capacity planning are abstracted away, and the cloud provider dynamically allocates resources as needed. Developers deploy functions, which are small, independent pieces of code that execute in response to specific events. Popular serverless platforms include AWS Lambda, Azure Functions, and Google Cloud Functions.",
        "se": "En molnmodell där leverantören hanterar all infrastruktur och utvecklare bara fokuserar på kod. Serverhantering och kapacitetsplanering döljs, och resurser fördelas dynamiskt vid behov. Utvecklare distribuerar funktioner som körs när vissa händelser sker. Exempel är AWS Lambda, Azure Functions och Google Cloud Functions.",
        "seSimple": "Ett sätt att köra kod i molnet utan att behöva tänka på servrar."
      },
      {
        "term": "Edge Computing",
        "en": "A distributed computing paradigm that brings computation and data storage closer to the location where it is needed, typically at the 'edge' of the network, near the devices generating the data. This approach reduces latency, conserves bandwidth, and improves the performance of applications, particularly those requiring real-time processing, by processing data locally rather than relying on a centralized cloud infrastructure.",
        "se": "Ett sätt att placera beräkningar och datalagring närmare de enheter som genererar datan. Det minskar fördröjning, sparar bandbredd och förbättrar prestanda, särskilt för applikationer som kräver realtidsbearbetning, genom att behandla data lokalt istället för i ett centralt moln.",
        "seSimple": "Att köra beräkningar nära där datan skapas, istället för långt borta i molnet."
      }
    ]
  },
  {
    "categoryName": "Arkitektur & Designmönster",
    "terms": [
      {
        "term": "Monorepository (Monorepo)",
        "en": "A version control strategy where multiple projects or components are stored and managed within a single, unified repository. This approach allows all related codebases to coexist, enabling shared code, consistent tooling, and centralized versioning. While a monorepo can simplify development for smaller projects by keeping everything in one place, it can become difficult to manage as the project scales, potentially leading to challenges with build times, dependency management, and coordination among teams. For this reason, monorepos may be more suited to smaller or simpler projects rather than large, complex systems.",
        "se": "En strategi för versionshantering där flera projekt eller komponenter lagras i ett enda gemensamt repository. Detta gör det enklare att dela kod, använda samma verktyg och ha en central versionhantering. För små projekt kan detta vara praktiskt, men i stora system kan det skapa problem med byggtider, beroenden och samordning mellan team.",
        "seSimple": "Alla projekt och komponenter sparas i samma kodförråd."
      },
      {
        "term": "Multi-Tier Architecture",
        "en": "A software architecture pattern that separates an application into multiple, distinct layers or tiers, each responsible for specific aspects of the application's functionality. This separation of concerns helps to organize code, improve scalability, and manage complexity by allowing each tier to evolve independently. The most common form is a three-tier architecture, but applications can have more or fewer tiers depending on the design requirements. The three-tier architecture typically includes the presentation tier (user interface), the application tier (business logic), and the data tier (database management).",
        "se": "Ett mönster där en applikation delas upp i flera lager eller nivåer som ansvarar för olika delar av funktionaliteten. Detta gör koden mer organiserad, skalbar och lättare att underhålla. Den vanligaste formen är tre lager, men det kan vara fler eller färre beroende på behov. De tre lagren är vanligtvis presentationslagret (gränssnitt), applikationslagret (logik) och datalagret (databashantering).",
        "seSimple": "Att dela upp program i flera lager, t.ex. *data, logik och gränssnitt*."
      },
      {
        "term": "Microservice",
        "en": "An architectural style that structures an application as a collection of loosely coupled, independently deployable services. Each microservice is responsible for a specific piece of functionality, such as user authentication, payment processing, or product management, and communicates with other services over a network, typically using HTTP/REST, gRPC, or messaging queues. This approach contrasts with monolithic architectures, where all functionality is tightly integrated into a single application.",
        "se": "En arkitektur där en applikation delas upp i små, fristående tjänster som var och en ansvarar för en specifik funktion, t.ex. inloggning eller betalningar. Dessa tjänster kommunicerar via nätverk. Detta skiljer sig från monolitiska system där allt är samlat i en applikation.",
        "seSimple": "En applikation delas upp i små, fristående tjänster"
      },
      {
        "term": "Backend System",
        "en": "Refers to the server-side infrastructure of an application, handling business logic, database interactions, user authentication, and other core functions that occur behind the scenes. It serves as the backbone of an application, processing requests from the front end and sending appropriate responses.",
        "se": "Avser serverdelen av en applikation som hanterar logik, databaser, användarhantering och andra centrala funktioner som sker i bakgrunden.",
        "seSimple": "Den del av programmet som körs på servern och sköter logik och data."
      },
      {
        "term": "Frontend System",
        "en": "Refers to the collection of tools, libraries, frameworks, and technologies used to build the user-facing part of a web application or website. This system is responsible for everything users interact with directly in their web browsers, including the user interface, navigation, content rendering, and dynamic behavior. A robust frontend system ensures a responsive, interactive, and seamless user experience across different devices and platforms.",
        "se": "Avser verktyg, ramverk och tekniker som används för att bygga den del av en webbapplikation som användarna ser och interagerar med. Det omfattar gränssnitt, navigation, innehåll och dynamiskt beteende.",
        "seSimple": "Den del av hemsidan som användaren ser och använder."
      },
      {
        "term": "WebMVC (Model-View-Controller)",
        "en": "A design pattern used in web development to separate concerns within an application. It divides an application into three interconnected components: the Model (which represents the data or business logic), the View (which represents the UI or presentation layer), and the Controller (which handles user input and updates the Model and View accordingly). This pattern is commonly used in web frameworks to organize code in a way that promotes modularity, scalability, and maintainability.",
        "se": "Ett mönster som delar upp en applikation i tre delar: Model (data och logik), View (gränssnitt) och Controller (hanterar inmatning och uppdaterar Model och View). Används ofta i webbapplikationer för att organisera koden.",
        "seSimple": "Ett sätt att dela upp kod i data, gränssnitt och styrning."
      },
      {
        "term": "Component",
        "en": "In React, a Component is a reusable, self-contained piece of UI that encapsulates its own structure, logic, and style. Components can be either functional or class-based and are the building blocks of a React application. They receive data via props and manage their own state to render UI dynamically based on user interaction or data changes. In a broader software architecture context, a Component can also refer to a backend microservice or any modular part of a system that performs a specific function independently. In this case, components interact with each other via well-defined interfaces, often through APIs or message queues, contributing to the overall functionality of an application.",
        "se": "I React är en komponent en återanvändbar, självständig del av gränssnittet med egen struktur, logik och stil. I ett bredare sammanhang kan en komponent också vara en del av backend eller annan modulär del av systemet som sköter en funktion.",
        "seSimple": "En modul som sköter en del av ett system, t.ex. en knapp eller en tjänst."
      },
      {
        "term": "DRY (Don't Repeat Yourself)",
        "en": "A principle of software development aimed at reducing repetition of code, logic, or data within a system. The DRY principle encourages developers to avoid duplicating code by abstracting repeated logic or data into reusable components, functions, or modules. This approach promotes cleaner, more maintainable code, and reduces the risk of errors by ensuring that any change only needs to be made in one place.",
        "se": "En princip som handlar om att undvika upprepning av kod och logik. Istället bör man återanvända komponenter och funktioner för att få renare och lättare underhållen kod.",
        "seSimple": "En regel som säger att man inte ska skriva samma kod flera gånger."
      },
      {
        "term": "Twelve Factor App",
        "en": "A methodology for building modern, scalable, and maintainable software-as-a-service (SaaS) applications. It was introduced by developers at Heroku to provide best practices for building web applications that can be easily deployed and scaled in cloud environments. The methodology outlines twelve principles that address various aspects of software development, from codebase management to deployment and operational concerns.",
        "se": "En **twelve-factor app** är en metodik för att bygga mjukvara som en tjänst (SaaS-appar) på ett hållbart, portabelt och skalbart sätt. Den togs fram av utvecklare på **Heroku** för att ge riktlinjer kring hur moderna webbapplikationer bör designas och driftsättas i molnmiljöer. \n \n Syftet är att göra appar: \n \n * **Bärbara** mellan olika miljöer (lokalt, test, produktion, olika molnleverantörer) \n * **Enkla att skala** horisontellt (lägga till fler instanser) \n * **Robusta** och lätta att underhålla över tid \n \n De **tolv faktorerna** är: \n \n 1. **Codebase** – En kodbas, versionshanterad (t.ex. Git), många deployer. \n 2. **Dependencies** – Deklarera och isolera beroenden tydligt. \n 3. **Config** – Lagra konfiguration i miljövariabler, inte i koden. \n 4. **Backing services** – Behandla tjänster som databaser och köer som utbytbara resurser. \n 5. **Build, release, run** – Separera bygg-, release- och körfaser. \n 6. **Processes** – Kör appen som en eller flera stateless-processer. \n 7. **Port binding** – Exportera tjänster via portbindning, inte via extern webserver. \n 8. **Concurrency** – Skala genom processer, inte trådar. \n 9. **Disposability** – Gör processer snabba att starta och avsluta för bättre robusthet. \n 10. **Dev/prod parity** – Håll utveckling, test och produktion så lika som möjligt. \n 11. **Logs** – Behandla loggar som strömmande händelser, inte som filer. \n 12. **Admin processes** – Kör administrativa/engångsskript separat från huvudprocesserna.",
        "seSimple": "En lista med regler för hur man bygger bra molnapplikationer."
      }
    ]
  },
  {
    "categoryName": "Programmeringsspråk & Modulsystem",
    "terms": [
      {
        "term": "Interpreter",
        "en": "A type of program that directly executes instructions written in a programming or scripting language without requiring them to be compiled into machine code first. Instead of translating the entire source code into a lower-level language (as a compiler does), an interpreter processes the source code line by line or statement by statement, translating and executing it on the fly. This can lead to slower execution times compared to compiled languages, but offers the advantage of immediate execution and ease of debugging.",
        "se": "En typ av program som direkt exekverar instruktioner skrivna i ett programmerings- eller skriptspråk utan att först kompileras till maskinkod. Tolken bearbetar koden rad för rad eller sats för sats och exekverar den direkt. Detta gör körningen långsammare än med kompilerade språk men enklare att testa och felsöka.",
        "seSimple": "Ett program som kör koden rad för rad direkt."
      },
      {
        "term": "Compiler",
        "en": "A program that translates code written in a high-level programming language (such as C, C++, or Java) into a lower-level language, typically machine code or bytecode, that can be executed directly by a computer's hardware or runtime environment. The primary goal of a compiler is to optimize and produce efficient executable code that can run on the target machine. A Transpiler (like Babel) also translates code, but instead of converting it to a lower-level language, it converts it from one high-level language or version to another (e.g., modern JavaScript ES6 to ES5). While a compiler targets machine-level code, a transpiler typically focuses on maintaining the same level of abstraction, just making the code compatible with different environments or versions.",
        "se": "Ett program som översätter kod skriven i högnivåspråk (som C, C++ eller Java) till ett lägre nivåspråk, oftast maskinkod eller bytekod, som kan köras direkt av datorn. Syftet är att skapa optimerad och effektiv körbar kod. En transpiler översätter däremot mellan språk eller versioner på samma nivå.",
        "seSimple": "Ett program som översätter kod till språk som datorn kan köra."
      },
      {
        "term": "Transpiler",
        "en": "A type of compiler that translates source code from one programming language or syntax into another language or syntax at the same level of abstraction. In web development, transpilers are often used to convert modern JavaScript (ES6+) or JSX (used in React) into a version of JavaScript that is compatible with older browsers or environments that do not natively support newer syntax.",
        "se": "En typ av kompilator som översätter källkod från ett språk eller syntax till ett annat på samma abstraktionsnivå. Vanligt i webbutveckling för att göra modern JavaScript kompatibel med äldre webbläsare.",
        "seSimple": "Ett program som gör om ny kod till äldre versioner som fler kan använda."
      },
      {
        "term": "CommonJS",
        "en": "A module system for JavaScript, primarily used in server-side development with Node.js. It allows developers to structure their code into reusable modules, making it easier to manage dependencies and maintain large codebases. Modules in CommonJS are loaded synchronously using the require function, and they export their functionality using module.exports.",
        "se": "Ett modulsystem för JavaScript, främst i Node.js. Gör det möjligt att dela upp koden i återanvändbara moduler. Moduler laddas med require och exporteras med module.exports.",
        "seSimple": "Ett sätt att dela upp och återanvända kod i Node.js."
      },
      {
        "term": "Require",
        "en": "require is a function in Node.js, used as part of the CommonJS module system, to synchronously load and use modules. It allows you to import functionality from other files or modules into your current file. Unlike the ES6 import statement, require can be called conditionally and at any point in the code, making it flexible but synchronous in nature. require is primarily used in Node.js environments to load CommonJS modules.",
        "se": "require är en funktion i Node.js som används i CommonJS-modulsystemet för att synkront ladda och använda moduler. Till skillnad från import kan require anropas när som helst i koden.",
        "seSimple": "Ett sätt att hämta in kod från andra filer i Node.js."
      },
      {
        "term": "Import (ES6 Modules)",
        "en": "A statement in JavaScript used to bring in modules and their exports from other files into the current file. It is part of the ES6 module system, which is designed to allow for modular programming and code reuse. Unlike require, import is statically analyzed, meaning it is hoisted and processed before the rest of the code runs. import supports both named imports and default imports, and while it is usually static, dynamic imports are also possible using import().",
        "se": "En sats i JavaScript för att importera moduler och deras exporter från andra filer. Är en del av ES6-modulsystemet som gör kod mer modulär. import analyseras innan koden körs, till skillnad från require.",
        "seSimple": "Ett modernt sätt att hämta in kod från andra filer i JavaScript."
      },
      {
        "term": "ECMAScript 6 (ES6)",
        "en": "ES6, also known as ECMAScript 2015, is the sixth edition of the ECMAScript language specification, and it brought significant updates to JavaScript. ES6 introduced new features and syntax that improved the language's power, readability, and ease of use, especially for building complex applications. Browser Support: Modern browsers have largely adopted ES6 features, but older browsers may require transpilation (e.g., using Babel) to convert ES6 code into ES5, ensuring compatibility.",
        "se": "ES6, även kallad ECMAScript 2015, är den sjätte versionen av ECMAScript-specifikationen. Den introducerade stora nyheter i JavaScript som förbättrade språkets kraft och läsbarhet. Moderna webbläsare stöder ES6, men äldre kräver transpilation till ES5.",
        "seSimple": "En nyare version av JavaScript med fler funktioner."
      },
      {
        "term": "Node",
        "en": "Node.js is an open-source, cross-platform JavaScript runtime environment that allows developers to execute JavaScript code on the server side. Built on Chrome's V8 JavaScript engine, Node.js is designed for building scalable, high-performance applications, particularly those that require real-time data interaction, such as web servers, APIs, and streaming services. Node.js uses an event-driven, non-blocking I/O model, making it efficient and suitable for applications that handle a large number of simultaneous connections.",
        "se": "Node.js är en öppen källkod och plattformsoberoende JavaScript-runtime för att köra JavaScript på serversidan. Byggd på Chromes V8-motor och designad för skalbara och högpresterande applikationer. \n \n --- \n \n # Node.js vs Express.js – Fusklapp \n \n **Node.js** \n  - JavaScript-runtime på serversidan. \n  - Bygger på V8-motorn (Chrome). \n  - Ger API:er för filsystem, nätverk, processhantering. \n  - Kan köra servrar direkt med inbyggda moduler (`http`). \n \n **Express.js** \n  - Webbramverk byggt ovanpå Node.js. \n  - Förenklar skapandet av webbservrar och API:er. \n  - Har routing (`GET /users`), middleware (autentisering, loggning). \n  - Abstraherar `req` och `res` så att du slipper low-level kod. \n \n 👉 **Sammanfattning:** \n \n Node.js = grunden (motor + verktyg). \n Express.js = ramverk som gör serverutveckling snabbare och enklare.",
        "seSimple": "Ett sätt att köra JavaScript på servern, inte bara i webbläsaren."
      },
      {
        "term": "Express",
        "en": "Express.js is a minimal and flexible web application framework for Node.js. It provides a robust set of features for building web and mobile applications, including tools for routing, middleware management, and handling HTTP requests and responses. Express.js simplifies the process of creating server-side applications, allowing developers to focus on writing the business logic rather than dealing with the underlying infrastructure.",
        "se": "Express.js är ett ramverk för Node.js som gör det enklare att bygga webbapplikationer och API:er. Det erbjuder routing, middleware och hantering av HTTP-förfrågningar. \n \n --- \n \n # Node.js vs Express.js – Fusklapp \n \n **Node.js** \n  - JavaScript-runtime på serversidan. \n  - Bygger på V8-motorn (Chrome). \n  - Ger API:er för filsystem, nätverk, processhantering. \n  - Kan köra servrar direkt med inbyggda moduler (`http`). \n \n **Express.js** \n  - Webbramverk byggt ovanpå Node.js. \n  - Förenklar skapandet av webbservrar och API:er. \n  - Har routing (`GET /users`), middleware (autentisering, loggning). \n  - Abstraherar `req` och `res` så att du slipper low-level kod. \n \n 👉 **Sammanfattning:** \n \n Node.js = grunden (motor + verktyg). \n \n Express.js = ramverk som gör serverutveckling snabbare och enklare.",
        "seSimple": "Ett verktyg som gör det enklare att bygga servrar med Node.js."
      },
      {
        "term": "Client-Side Scripting",
        "en": "Refers to the execution of scripts, typically written in languages like JavaScript, within the user's web browser rather than on the server. This allows web pages to be dynamic, interactive, and responsive to user input without requiring a page reload. Common tasks for client-side scripts include form validation, DOM manipulation, and making asynchronous requests to a server (AJAX).",
        "se": "Avser körning av skript i användarens webbläsare istället för på servern. Detta gör webbsidor mer interaktiva och responsiva utan att sidan behöver laddas om.",
        "seSimple": "Kod som körs direkt i webbläsaren, t.ex. för interaktiva sidor."
      },
      {
        "term": "Server-Side Scripting",
        "en": "The process of writing code that runs on a server rather than on the client (browser). This scripting is responsible for generating dynamic web content, interacting with databases, handling user requests, and managing application logic before sending the final output to the client's browser. Common server-side scripting languages include PHP, Node.js (JavaScript), Python, Ruby, and Java.",
        "se": "Kod som körs på en server istället för i webbläsaren. Den skapar dynamiskt innehåll, pratar med databaser och hanterar användarförfrågningar.",
        "seSimple": "Kod som körs på servern och skickar resultatet till webbläsaren."
      },
      {
        "term": "API (Application Programming Interface)",
        "en": "A set of rules that allows different software applications to communicate with each other.",
        "se": "Ett regelverk som gör det möjligt för olika mjukvaror att kommunicera med varandra.",
        "seSimple": "Ett sätt för olika program att prata med varandra."
      },
      {
        "term": "RESTful (Representational State Transfer)",
        "en": "A style of web service architecture that follows the principles of REST (Representational State Transfer). RESTful services are designed to be stateless, scalable, and easily maintainable, allowing different systems to communicate over the web using standard HTTP methods like GET, POST, PUT, DELETE, etc. RESTful APIs are commonly used to expose data and functionality of web applications to other systems, such as front-end clients or other backend services.",
        "se": "En arkitektur för webbtjänster som följer REST-principerna. RESTful-tjänster är stateless, skalbara och enkla att underhålla. De använder standard-HTTP-metoder som GET, POST och DELETE.",
        "seSimple": "Ett sätt för system att prata via webben med vanliga webbanrop."
      },
      {
        "term": "Persistency",
        "en": "In JavaScript, persistency refers to the ability to store data in a way that it remains available across different sessions, application restarts, or system reboots. Persistent storage ensures that data is not lost when a user closes their browser or when a server shuts down, making it crucial for maintaining state, user preferences, and application data over time.",
        "se": "I JavaScript betyder persistens att data sparas så att den finns kvar även efter att användaren stänger webbläsaren eller när servern startas om. Detta är viktigt för att bevara state, användarinställningar och data.",
        "seSimple": "Att spara data så att den inte försvinner när man stänger webbläsaren."
      }
    ]
  },
  {
    "categoryName": "Testning",
    "terms": [
      {
        "term": "Unit Testing",
        "en": "A software testing method where individual units or components of a software application are tested in isolation from the rest of the application. The primary goal of unit testing is to verify that each unit functions correctly on its own. Unit tests are typically written and run by developers and are known for being fast and efficient, providing quick feedback on the correctness of the code during development.",
        "se": "En testmetod där enskilda enheter eller komponenter i en applikation testas isolerat från resten av systemet. Målet är att verifiera att varje enhet fungerar korrekt på egen hand. Unit-tester är snabba och skrivs oftast av utvecklare för att snabbt ge återkoppling om kodens korrekthet.",
        "seSimple": "Testar små delar av koden för att se att de fungerar."
      },
      {
        "term": "Component Testing",
        "en": "Involves testing individual components of a software application in isolation to ensure they function correctly. This type of testing treats the component as a 'black box,' focusing on the inputs and expected outputs without considering the internal workings. It's commonly used in the context of UI components in frameworks like React, where you test how a specific component behaves under various conditions.",
        "se": "Test av enskilda komponenter i en applikation för att se till att de fungerar som de ska. Testet fokuserar på indata och förväntade resultat utan att titta på komponentens inre logik. Vanligt inom UI-testning i t.ex. React.",
        "seSimple": "Testar enskilda delar, som en knapp eller komponent i en app."
      },
      {
        "term": "Integration Testing",
        "en": "A level of software testing where individual units or components are combined and tested as a group. The primary goal of integration testing is to identify issues that occur when different components interact with each other, such as mismatches in data formats, incorrect interfaces, or unexpected behavior when units are integrated. This type of testing ensures that the components of a system work together as expected and that their interactions produce the correct results.",
        "se": "En testnivå där olika komponenter eller moduler kombineras och testas tillsammans. Syftet är att upptäcka problem som uppstår vid interaktion mellan enheterna, som fel i dataformat eller gränssnitt.",
        "seSimple": "Testar att olika delar fungerar ihop."
      },
      {
        "term": "End User Testing (UAT)",
        "en": "The final phase of the software testing process where the actual users of the software test the system in a real-world environment to ensure that it meets their needs and requirements. This type of testing focuses on validating that the software performs as expected from the user's perspective, addressing both functionality and usability before the product is released to production.",
        "se": "Den sista testfasen där riktiga användare testar systemet i en verklig miljö för att se att det uppfyller deras behov. Fokuserar på både funktionalitet och användbarhet innan lansering.",
        "seSimple": "Användare testar om programmet fungerar som de vill."
      },
      {
        "term": "Test-Driven Development (TDD)",
        "en": "A software development process in which developers write tests for a new feature or functionality before writing the actual code to implement it. The TDD cycle typically involves writing a failing test, writing the minimum code necessary to pass the test, and then refactoring the code while ensuring that all tests continue to pass. TDD promotes the creation of cleaner, more reliable code by ensuring that every piece of functionality is backed by a corresponding test.",
        "se": "En utvecklingsmetod där tester skrivs innan själva koden. Cykeln är: skriv ett misslyckat test, skriv minsta möjliga kod för att klara testet, och refaktorera sedan koden. TDD leder till mer pålitlig och välstrukturerad kod.",
        "seSimple": "Man skriver tester först och kodar sen så att testerna går igenom."
      },
      {
        "term": "Double Dummy",
        "en": "In software testing, a Dummy is a type of testing double used as a placeholder object that is passed around but never actually used in the test. Dummies are typically utilized when a method or function requires an argument, but the specific value of that argument is irrelevant to the test being conducted. The primary purpose of a dummy is to fulfill the requirements of the function signature without influencing the outcome of the test.",
        "se": "En Dummy är en test-dubbel som fungerar som en platshållare i tester. Den används när en metod kräver ett argument, men värdet är irrelevant för testet. \n \n *Exempel:* Skicka in `null` eller en tom sträng för att en metod kräver ett argument.",
        "seSimple": "En fejk som bara fyller en plats men inte gör något."
      },
      {
        "term": "Double Stub",
        "en": "A type of testing double used in software testing that replaces a real object or method with a simplified version that provides predefined responses. Unlike mocks or spies, stubs do not record interactions or track how they are used; they simply return hard-coded values or responses when called. Stubs are particularly useful when you need to isolate the component under test by removing dependencies on external systems or complex objects, ensuring that the test focuses solely on the logic being tested.",
        "se": "En Stub är en test-dubbel som ersätter ett objekt eller metod med en förenklad version som returnerar fördefinierade svar. Den loggar inte anrop, utan används för att isolera testet från externa beroenden. \n \n *Exempel:* En metod som alltid returnerar `ok` oavsett input.",
        "seSimple": "En fejk som alltid ger samma svar."
      },
      {
        "term": "Double Fake",
        "en": "A type of testing double used in software testing that provides a working, but simplified, implementation of a component or service. Unlike dummies or stubs, which do not carry out any real logic, a fake mimics the behavior of a real object but with less complexity, making it suitable for testing purposes. Fakes are often used when the real object is too resource-intensive or complex to use in a test environment, such as a database or an external API.",
        "se": "En Fake är en test-dubbel som har en fungerande men förenklad version av en komponent eller tjänst. Den används istället för den riktiga när denna är för tung eller komplex för testmiljön. \n \n *Exempel:* En in-memory-databas istället för en riktig databas.",
        "seSimple": "En förenklad version som fungerar på riktigt men enklare."
      },
      {
        "term": "Double Spy",
        "en": "A Spy is a type of testing double used in software testing that wraps around a real object or function and records information about how it is used during the test, such as method calls and the arguments passed. Unlike mocks or stubs, a spy does not replace the original functionality; instead, it monitors and tracks interactions without altering the behavior of the underlying code. Spies are particularly useful for verifying that certain methods were called, how many times they were called, and with what parameters, while still allowing the original logic to be executed.",
        "se": "En Spy är en test-dubbel som används för att övervaka hur en metod eller funktion anropas under ett test. Den ersätter inte logiken utan loggar bara interaktioner som vilka metoder som körts och med vilka argument. \n \n *Exempel:* Kontrollera efteråt om `save()` kallades med rätt parameter.",
        "seSimple": "En fejk som kollar hur en funktion används."
      },
      {
        "term": "Double Mock",
        "en": "A type of testing double used in software testing that not only simulates the behavior of real objects but also records the interactions with it, such as method calls and arguments passed. Mocks are particularly useful when you need to verify that certain methods were called during the execution of a test and to check the specific interactions between components. Mocks can be pre-programmed with expectations that define what methods should be called and with what parameters, making them more sophisticated than other testing doubles like stubs or dummies.",
        "se": "En Mock är en test-dubbel som både simulerar beteendet av ett riktigt objekt och loggar interaktionerna. Den kan förväntas anropas på ett visst sätt och testet misslyckas om detta inte sker. \n \n *Exempel:* Kontrollera att `sendEmail()` anropas exakt en gång.",
        "seSimple": "En fejk som både beter sig som det riktiga och kollar hur det används."
      },
      {
        "term": "Jest",
        "en": "A popular JavaScript testing framework developed by Facebook, designed primarily for testing React applications, but also suitable for any JavaScript project. Jest provides a powerful, flexible, and easy-to-use environment for writing and running tests. It includes features like zero-configuration setup, an easy-to-understand syntax, built-in mocking capabilities, and snapshot testing. Jest also supports testing asynchronous code and has a rich set of matchers for assertions.",
        "se": "Ett populärt JavaScript-testframework utvecklat av Facebook, främst för React men även för andra projekt. Jest är lätt att använda, kräver ingen konfiguration och erbjuder funktioner som mocking och snapshot-tester.",
        "seSimple": "Ett verktyg för att testa JavaScript-kod, ofta med React."
      },
      {
        "term": "React Testing Library",
        "en": "A lightweight testing utility that provides tools for testing React components. Unlike traditional testing frameworks, React Testing Library focuses on testing components from the perspective of the user, ensuring that your tests are more reliable and maintainable by simulating user interactions and verifying the behavior of the component as it would be in a real environment. It is often used in conjunction with testing frameworks like Jest.",
        "se": "Ett lättviktigt testverktyg för React-komponenter. Det fokuserar på att testa komponenter ur användarens perspektiv genom att simulera interaktioner och kontrollera beteende. Ofta används det tillsammans med Jest.",
        "seSimple": "Ett verktyg för att testa React-komponenter som användaren ser dem."
      },
      {
        "term": "Cypress",
        "en": "A modern, end-to-end testing framework designed specifically for web applications. It allows developers to write tests that run directly in the browser, simulating user interactions and verifying that the application behaves as expected. Cypress is known for its fast execution, real-time reloading, and built-in dashboard that provides detailed insights into test results. It's particularly popular for testing complex JavaScript applications built with frameworks like React, Angular, and Vue.js.",
        "se": "Ett modernt end-to-end-testframework för webbläsarapplikationer. Cypress kör tester direkt i webbläsaren och simulerar användarinteraktioner. Det är snabbt, erbjuder live-reload och ett detaljerat dashboard för testresultat.",
        "seSimple": "Ett verktyg för att testa hela webbsidor som en simulerad användare klickar runt i."
      }
    ]
  },
  {
    "categoryName": "CI/CD & monitoring",
    "terms": [
      {
        "term": "Continuous Integration (CI)",
        "en": "The practice of frequently integrating code changes into a shared repository, where automated builds and tests are run to catch errors early.",
        "se": "Att ofta slå ihop kodändringar till en gemensam kodbas och köra automatiska tester för att hitta fel tidigt.",
        "seSimple": "Automatiska tester körs varje gång ny kod läggs till."
      },
      {
        "term": "Continuous Deployment (CD)",
        "en": "An extension of Continuous Integration where code changes are automatically deployed to production after passing automated tests, ensuring that software is always in a releasable state.",
        "se": "Kod som automatiskt släpps till produktionen efter att den klarat tester. Säkerställer att mjukvaran alltid kan användas.",
        "seSimple": "Ny kod som fungerar bra går direkt ut till användarna."
      },
      {
        "term": "GitHub Actions",
        "en": "A powerful CI/CD platform that allows developers to automate tasks, such as building, testing and deploying code, directly from their GitHub repositories. With GitHub Actions, you can create custom workflows that are triggered by specific events (like a push, pull request, or issue creation) to streamline your development process.",
        "se": "En kraftfull CI/CD-plattform som låter utvecklare automatisera uppgifter såsom bygg, test och driftsättning direkt från sina GitHub-repositories. Med GitHub Actions kan du skapa anpassade arbetsflöden som triggas av specifika händelser (som push, pull request eller skapande av issue) för att effektivisera utvecklingsprocessen.",
        "seSimple": "I/CD-verktyg integrerat i GitHub. Automatiserar bygg, test och deployment vid händelser som push/pull request"
      },
      {
        "term": "Continuos Monitoring",
        "en": "The practice of constantly tracking, analiyzing and reporting the performance, security and reliability of an application or system in real-time. This process helps to identify and resolve issues before they affect end users, ensuring the application runs smoothly. Continuous monitoring typically involves tracking metrics such as system health, uptime, response times, error rates, and security threats.",
        "se": "Praktiken att kontinuerligt spåra, analysera och rapportera prestanda, säkerhet och tillförlitlighet för en applikation eller ett system i realtid. Denna process hjälper till att identifiera och åtgärda problem innan de påverkar slutanvändare och säkerställer att applikationen körs smidigt. Kontinuerlig övervakning innebär vanligtvis att man följer mätvärden såsom systemhälsa, upptid, svarstider, felfrekvenser och säkerhetshot.",
        "seSimple": "Kontinuerlig övervakning av prestanda, fel och säkerhet. Hjälper att upptäcka problem innan de drabbar användare."
      }
    ]
  },
  {
    "categoryName": "Andra koncept och verktyg",
    "terms": [
      {
        "term": "Markdown (MD)",
        "en": "A lightweight markup language used for formatting text. It is designed to be easy to read and write, using plain text formatting syntax that can be converted to HTML, for web content, Markdown is widely used for writing documentation, README files, blog posts, and other content where simplicity and readability in plain text are important. (Key Features: Simple Syntax, Easy to Convert, Widespread Use)",
        "se": "Ett lättviktigt märkspråk som används för att formatera text. Det är utformat för att vara lätt att läsa och skriva, med ren text-syntax som kan konverteras till HTML för webbinnehåll. Markdown används i stor utsträckning för att skriva dokumentation, README-filer, blogginlägg och annat innehåll där enkelhet och läsbarhet i klartext är viktigt. (Nyckelfunktioner: Enkel syntax, lätt att konvertera, utbredd användning)",
        "seSimple": "Ett enkelt textformat som konverteras till HTML. Vanligt för README-filer och dokumentation."
      },
      {
        "term": "YAML (YAML Ain't Markup Language)",
        "en": "A human-readable data serialization format commonly used for configuration files and data exchange between languages with different data structures. The .yml or .yaml file extension is used for files written in YAML. It is known for its simplicity and ease of use, allowing developers to define data in a clear and structured manner without the complexity of other formats like XML or JSON.",
        "se": "Ett människoläsbart serialiseringsformat för data, ofta använt för konfigurationsfiler och datautbyte mellan språk med olika datastrukturer. Filändelsen .yml eller .yaml används för YAML-filer. YAML är känt för sin enkelhet och användbarhet, vilket gör det möjligt att definiera data på ett tydligt och strukturerat sätt utan komplexiteten i exempelvis XML eller JSON.",
        "seSimple": "Ett lättläst format för konfigurationsfiler. Vanligt i CI/CD och Docker."
      },
      {
        "term": "Hot Module Replacement (HMR)",
        "en": "A feature in modern web development tools that allows modules of an application to be updated in the browser without requiring a full page reload. This feature is particularly useful during development, as it enables faster iteration by instantly applying changes to the application's code while preserving the current state.",
        "se": "En funktion i moderna utvecklingsverktyg som gör det möjligt att uppdatera moduler i en applikation i webbläsaren utan full omladdning av sidan. Detta är särskilt användbart under utveckling då det möjliggör snabbare iteration genom att direkt tillämpa kodändringar samtidigt som aktuellt tillstånd bevaras. Typiskt används HMR i verktyg som Webpack och Vite.",
        "seSimple": "Uppdaterar kod under utveckling utan att sidan laddas om."
      },
      {
        "term": "TTFHW (Time to First Hello World)",
        "en": "Refers to the amount of time it takes for a developer to set up a project or environment and reach the point where they can run a basic 'Hello World!' program. This metric is often used to measure how quickly and easily a new developer can get started with a tool, framework, or project. A lower TTFHW indicates a more user-friendly setup process and a smoother onboarding experience.",
        "se": "Avser den tid det tar för en utvecklare att sätta upp ett projekt eller en miljö och nå punkten där hen kan köra ett grundläggande 'Hello World!'-program. Detta mått används ofta för att bedöma hur snabbt och enkelt en ny utvecklare kan komma igång med ett verktyg, ramverk eller projekt. Ett lägre TTFHW indikerar en mer användarvänlig setup och en smidigare onboarding-upplevelse.",
        "seSimple": "Mått på hur snabbt en utvecklare kan sätta upp och köra ett första exempel. Lågt värde = lätt att komma igång."
      }
    ]
  }
]